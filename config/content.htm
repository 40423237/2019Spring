<h1>期中影片</h1>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/KXI19akbOng" width="560"></iframe></p>
<p></p>
<h1>期末影片</h1>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/66TZhRjQrz4" width="560"></iframe></p>
<p></p><h1>實習任務操作</h1>
<h2>可攜程式系統</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/62f2iByFt6s" width="560"></iframe></p>
<h2>Tutorial</h2>
<p>bubbleRob1:基礎操作練習</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/epeD4azBAd4" width="560"></iframe></p>
<h2>gitbook 重點整理</h2>
<p><a href="https://git-scm.com/book/zh-tw/v2">gitbook網址</a></p>
<h3>1-1關於版本控制</h3>
<p>摘要：擁有將檔案復原到先前狀態的功能，如此一來一旦發生類似錯誤或遺失檔案之情形，即可復原到尚未發生錯誤的地方。</p>
<p><span> </span></p>
<p>本地端版本控制<span>- </span>將檔案複製到另一目錄，最常見，簡單，但最容易發生錯誤，造成覆寫到其他檔案之情形。</p>
<p>解決方法<span>:  rcs </span>指令<span>-</span>於硬碟中保存補丁集合，即可透過套用各種補丁，重新產生檔案<span>(</span>較古老<span>)</span></p>
<p><span> </span></p>
<p>集中化版本控制<span>-</span>用一個伺服器來管理多台電腦，如此一來即可互相了解其他人的進度</p>
<p>缺點為如果中央伺服器發生故障，會造成無法挽回之損失</p>
<p><span> </span></p>
<p>分散式版本控制-此方法彌補了集中化的缺點，並不會因單一伺服器故障而造成資料遺失，於任何一協同者都能進行檔案復原。</p><h3>Chapter2</h3>
<p>2.1Git 基礎 - 取得一個 Git 倉儲</p>
<p>有兩種主要方法來取得一個 Git 倉儲。 第一種是將現有的專案或者資料夾匯入 Git； 第二種是從其它伺服器克隆（clone）一份現有的 Git 倉儲。</p>
<p>2.2Git 基礎 - 紀錄變更到版本庫中</p>
<p>工作目錄下的每個檔案有兩種狀態：已追蹤、未追蹤。 「已追蹤」檔案是指那些在上次快照中的檔案：它們的狀態可能是「未修改」、「已修改」、「已預存（staged）」； 「未追蹤」則是其它以外的檔案——在工作目錄中，卻不包含在上次的快照中，也不在預存區（staging area）中的任何檔案； 當你第一次克隆（clone）一個版本庫時，所有檔案都是「已追蹤」且「未修改」，因為 Git 剛剛檢出它們並且你尚未編輯過任何檔案。</p>
<p>2.3Git 基礎 - 檢視提交的歷史記錄</p>
<p>想要檢視之前發生過什麼事，在產生數筆提交（<span>commit</span>）或者克隆（<span>clone</span>）一個已有歷史記錄的版本庫之後，<span>git log</span> 命令有大量且多樣的選項，能精確地找出你想搜尋的結果</p>
<p>2.4 Git 基礎 - 復原</p>
<p>常見的復原操作發生在當你太早提交（commit），接著才發現忘了加入某些檔案，或者寫錯了提交訊息； 如果你想要重新提交，你可以在提交命令上使用 --amend</p>
<p>git checkout -- &lt;file&gt; 是一個危險的命令， 你對那個檔案所做的任何修改都會消失<span>——Git </span>只是複製了另一個檔案來覆蓋它； 除非你很肯定地知道你不想要那個檔案了，否則千萬不要使用這個命令。</p>
<p>2.5Git 基礎 - 與遠端協同工作</p>
<p>將分享的資料「推送（push）」到端遠版本庫、或者從遠端版本庫「拉取（pull）」分享的資料</p>
<p>你可以執行 git remote rename 來重新命名遠端的簡稱。 例如：如果你想要將 pb 重新命名為 paul</p>
<p>2.6Git 基礎 - 標籤</p>
<p>列出你的標籤</p>
<p>想要列出 Git 中所有標籤的方法非常直覺。 只要輸入 git tag，建立一個有註解的標籤很簡單。 最簡單的方法是在你建立標籤時，同時指定<span> -a</span>，指令中的<span> -a </span>選項後面同時指定了一個標籤訊息，這個訊息會和這個標籤一起保存。</p>
<p>2.7Git 基礎 - Git Aliases</p>
<p>如果你只打了某個指令的一部份，Git 並不會自動推測出你想要的指令。 如果你懶得輸入完整的 Git 指令，你可以輕易的使用 git config 來替指令設定別名。這樣的設定意味著你可以只打 git ci 而不需要打 git commit。 隨著你深入使用 Git，你將會發現某些指令用的很頻繁，不要猶豫，馬上建立新的指令別名。</p>
<p>2.8Git 基礎 - 總結</p>
<p>完成所有基本的 Git 本地操作——創建或者克隆一個倉儲、修改檔案、預存並提交這些更改、瀏覽倉儲過去的所有更改歷史。</p><h1>倉儲管理</h1>
<p><a href="https://github.com/40423237/2019Spring">個人倉儲</a></p>
<p><a href="https://github.com/mdekmol/cd2019b-task1-2019cdb_t1_g4">小組倉儲</a></p>
<p><a href="https://mdekmol.github.io/cd2019b-task1-2019cdb_t1_g4/content/index.html">小組網站</a></p><h1>專案報告書</h1>
<p><a href="/downloads/專案報告書BG4-初版1.pdf">專案報告書BG4</a></p>
<p>期末報告被分配到的工作為製作專案報告書PDF</p>